<?xml version="1.0"?>
<doc>
    <assembly>
        <name>HWKJ.Common.Serializable</name>
    </assembly>
    <members>
        <member name="T:HWKJ.Common.Serializable.Converters.LongDateTimeConverter">
            <summary>
            自定义JsonConverter日期处理转换类，全局已设置
            使用方式：日期字段上加[JsonConverter(typeof(LongDateTimeConverter))]特性
            </summary>
        </member>
        <member name="T:HWKJ.Common.Serializable.Converters.ShortDateTimeConverter">
            <summary>
            JSON序列化短时间
            </summary>
        </member>
        <member name="T:HWKJ.Common.Serializable.Converters.BoolConverter">
            <summary>
            自定义JsonConverter布尔值处理转换类，全局已设置
            使用方式：日期字段上加[JsonConverter(typeof(BoolConvert))]特性
            </summary>
        </member>
        <member name="M:HWKJ.Common.Serializable.Converters.BoolConverter.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="booleanString">将bool值转换成的字符串值</param>
        </member>
        <member name="M:HWKJ.Common.Serializable.Converters.BoolConverter.CanConvert(System.Type)">
            <summary>
            判断是否为Bool类型
            </summary>
            <param name="objectType">类型</param>
            <returns>为bool类型则可以进行转换</returns>
        </member>
        <member name="T:HWKJ.Common.Serializable.Converters.ChinaDateTimeConverter">
            <summary>
            自定义JsonConverter日期处理转换类，全局已设置
            使用方式：日期字段上加[JsonConverter(typeof(ChinaDateTimeConverter))]特性
            </summary>
        </member>
        <member name="T:HWKJ.Common.Serializable.BinaryConvert">
            <summary>
            二进制序列化操作类
            </summary>
        </member>
        <member name="M:HWKJ.Common.Serializable.BinaryConvert.ObjectToBinary``1(``0)">
            <summary>
            二进制序列化
            </summary>
            <typeparam name="T">序列化的类型</typeparam>
            <param name="obj">待序列化的对象</param>
            <returns>二进制</returns>
        </member>
        <member name="M:HWKJ.Common.Serializable.BinaryConvert.BinaryToObject``1(System.Byte[])">
            <summary>
            二进制反序列化
            </summary>
            <typeparam name="T">序列化的类型</typeparam>
            <param name="bytes">二进制</param>
            <returns>序列化的结果</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "T:HWKJ.Common.Serializable.DataTableExtend" -->
        <member name="M:HWKJ.Common.Serializable.DataTableExtend.ToModel``1(System.Data.DataTable)">
            <summary>
            DataTable转List
            </summary>
        </member>
        <member name="M:HWKJ.Common.Serializable.DataTableExtend.ToModel``1(System.Data.DataSet)">
            <summary>
            填充对象列表：用DataSet的第一个表填充实体类
            </summary>
        </member>
        <member name="M:HWKJ.Common.Serializable.DataTableExtend.ToModel``1(System.Data.DataSet,System.Int32)">
            <summary>  
            填充对象列表：用DataSet的第index个表填充实体类
            </summary>  
        </member>
        <member name="M:HWKJ.Common.Serializable.DataTableExtend.ToModel``1(System.Data.DataRow)">
            <summary>  
            填充对象：用DataRow填充实体类
            </summary>  
        </member>
        <member name="M:HWKJ.Common.Serializable.DataTableExtend.ToDataSet``1(System.Collections.Generic.List{``0})">
            <summary>
            实体类转换成DataSet
            </summary>
            <param name="modelList">实体类列表</param>
        </member>
        <member name="M:HWKJ.Common.Serializable.DataTableExtend.ToDataTable``1(System.Collections.Generic.List{``0})">
            <summary>
            实体类转换成DataTable
            </summary>
            <param name="modelList">实体类列表</param>
            <returns></returns>
        </member>
        <member name="M:HWKJ.Common.Serializable.DataTableExtend.CreateData``1(``0)">
            <summary>
            根据实体类得到表结构
            </summary>
            <param name="model">实体类</param>
        </member>
        <member name="M:HWKJ.Common.Serializable.DataTableExtend.ToJson(System.Data.DataSet)">
            <summary>
            DataSet转换为Json
            </summary>
        </member>
        <member name="M:HWKJ.Common.Serializable.DataTableExtend.ToJson(System.Data.DataTable)">
            <summary>
            Datatable转换为Json
            </summary>
        </member>
        <member name="M:HWKJ.Common.Serializable.DataTableExtend.ToJson(System.Data.DataTable,System.String)">
            <summary>
            Datatable转换为Json
            </summary>
        </member>
        <member name="M:HWKJ.Common.Serializable.DataTableExtend.ToDataSet(System.String)">
            <summary>
            将JSON解析成DataSet只限标准的JSON数据
            例如：json＝{t1:[{name:'数据name',type:'数据type'}]} 
            或 json＝{t1:[{name:'数据name',type:'数据type'}],t2:[{id:'数据id',gx:'数据gx',val:'数据val'}]}
            </summary>
            <param name="json">Json字符串</param>
            <returns>DataSet</returns>
        </member>
        <member name="T:HWKJ.Common.Serializable.JsonConvert">
            <summary>
            JSON序列化操作类
            </summary>
        </member>
        <member name="M:HWKJ.Common.Serializable.JsonConvert.ObjectToJson``1(``0)">
            <summary>
            DataContract Json序列化(效率中等)
            </summary>
            <typeparam name="T">序列化的类型</typeparam>
            <param name="obj">待序列化的对象</param>
            <returns>Json字符串</returns>
        </member>
        <member name="M:HWKJ.Common.Serializable.JsonConvert.JsonToObject``1(System.String)">
            <summary>
            DataContract Json反序列化(效率中等)
            </summary>
            <typeparam name="T">序列化的类型</typeparam>
            <param name="jsonString">Json字符串</param>
            <returns>反序列化的结果</returns>
        </member>
        <member name="M:HWKJ.Common.Serializable.JsonConvert.NewtonsoftJsonConvert``1(``0,System.Boolean)">
            <summary>
            Newtonsoft Json序列化(效率最高)
            </summary>
            <typeparam name="T">序列化的类型</typeparam>
            <param name="obj">待Newtonsoft序列化的对象</param>
            <param name="igoreNull">是否忽略值为null的字段</param>
            <returns>Json字符串</returns>
        </member>
        <member name="M:HWKJ.Common.Serializable.JsonConvert.NewtonsoftJsonConvert``1(System.String)">
            <summary>
            JavaScript Json反序列化(效率最高)
            </summary>
            <typeparam name="T">序列化的类型</typeparam>
            <param name="jsonString">Json字符串</param>
            <returns>JavaScript反序列化的结果</returns>
        </member>
        <member name="M:HWKJ.Common.Serializable.JsonConvert.ParseJsonObject(System.String)">
            <summary>
            将Json字符串转换为JObject对象（非数组用JObject加载），可支持Linq
            </summary>
        </member>
        <member name="M:HWKJ.Common.Serializable.JsonConvert.ParseJsonArray(System.String)">
            <summary>
            将Json字符串转换为JArray对象（数组用JArray加载），可支持Linq
            JArray 只能用来查找索引的项的对象，找到对象需要转换为 JObject，再查找对应的属性值
            </summary>
        </member>
        <member name="M:HWKJ.Common.Serializable.JsonConvert.ToComGridJson``1(System.Int32,System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            combogrid json 序列化
            </summary>
            <param name="total"></param>
            <param name="rows"></param>
            <param name="footer"></param>
            <returns></returns>
        </member>
        <member name="T:HWKJ.Common.Serializable.XmlConvert">
            <summary>
            XML序列化操作类
            </summary>
        </member>
        <member name="M:HWKJ.Common.Serializable.XmlConvert.ObjectToXml``1(``0)">
            <summary>
            XML序列化
            </summary>
            <typeparam name="T">序列化的类型</typeparam>
            <param name="obj">待序列化的对象</param>
            <returns>XML字符串</returns>
        </member>
        <member name="M:HWKJ.Common.Serializable.XmlConvert.XmlToObject``1(System.String)">
            <summary>
            XML反序列化
            </summary>
            <typeparam name="T">序列化的类型</typeparam>
            <param name="xml">XML字符串</param>
            <returns>序列化的结果</returns>
        </member>
        <member name="M:HWKJ.Common.Serializable.XmlConvert.CXmlToDataSet(System.String)">
            <summary>
            将Xml内容字符串转换成DataSet对象
            <returns>移植于RHIS.Service项目</returns>
            </summary>
            <param name="xmlStr"></param>
        </member>
    </members>
</doc>
